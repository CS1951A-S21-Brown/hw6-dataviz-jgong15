// TODO: Create a linear scale for the x axis (number of occurrences)
let x_regionGenres = d3.scaleLinear()
    .range([0, regionGenres_width - margin.left - margin.right - 100]);

// TODO: Create a scale band for the y axis (artist)
let y_regionGenres = d3.scaleBand()
    .range([0, regionGenres_height - margin.top - margin.bottom])
    .padding(0.1);  // Improves readability

// TODO: Update the x axis domain with the max count of the provided data
x_regionGenres.domain([0, d3.max(data, function(d) {return d.value})]);

// TODO: Update the y axis domains with the desired attribute
y_regionGenres.domain(data.map(function(d) {return d.key}));
// HINT: Use the attr parameter to get the desired attribute for each data point

// TODO: Render y-axis label
y_axis_label_regionGenres.call(d3.axisLeft(y_regionGenres).tickSize(0).tickPadding(10));

/*
    This next line does the following:
        1. Select all desired elements in the DOM
        2. Count and parse the data values
        3. Create new, data-bound elements for each data value
 */
let bars = svg_regionGenres.selectAll("rect").data(data);



// TODO: Render the bar elements on the DOM
/*
    This next section of code does the following:
        1. Take each selection and append a desired element in the DOM
        2. Merge bars with previously rendered elements
        3. For each data point, apply styling attributes to each element

    Remember to use the attr parameter to get the desired attribute for each data point
    when rendering.
 */
bars.enter()
    .append("rect")
    .merge(bars)
    .attr("fill", function(d) { return color(d.key) })
    .transition()
    .duration(1000)
    .attr("x", x_regionGenres(0))
    .attr("y", function(d) { return y_regionGenres(d.key) })               // HINT: Use function(d) { return ...; } to apply styles based on the data point
    .attr("width", function(d) { return x_regionGenres(d['value'])} )
    .attr("height",  y_regionGenres.bandwidth());        // HINT: y.bandwidth() makes a reasonable display height

/*
    In lieu of x-axis labels, we are going to display the count of the artist next to its bar on the
    bar plot. We will be creating these in the same manner as the bars.
 */
let counts = countRef_regionGenres.selectAll("text").data(data);

// TODO: Render the text elements on the DOM
counts.enter()
    .append("text")
    .merge(counts)
    .transition()
    .duration(1000)
    .attr("x", function(d) { return x_regionGenres(d.value)+ 10})       // HINT: Add a small offset to the right edge of the bar, found by x(d.count)
    .attr("y", function(d) { return y_regionGenres(d.key) + 10})       // HINT: Add a small offset to the top edge of the bar, found by y(d.artist)
    .style("text-anchor", "start")
    .text(function(d) { return d.value});           // HINT: Get the count of the artist

y_axis_text_regionGenres.text("Publisher");
title_regionGenres.text("Top 10 Publishers in Genre: " + document.getElementById("regionGenresSelect").value);

// Remove elements not in use if fewer groups in new dataset
bars.exit().remove();
counts.exit().remove();
